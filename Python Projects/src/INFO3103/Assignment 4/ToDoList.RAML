#RAML 1.0
title: To-Do List API

/users
  type: Collection
    get:
      description: Returns all usernames in the table user
        responses:
          200:
            body:
              application/json
               example:
                  {
                    id: "1",
                    userName: "Example USERNAME",
                }

    post:
     description: Adds a user resource to the users table
      queryParameters:
        userName:
            userID: An assigned value
            required: true
            type: string
      body:
        application/json
      responses:
        200/201:
          body:
            application/json
              example:
              {
                message: "Resource Created"
              }
        400:
          body:
            application/json
              example:
                {
                  message: "user not created. Check syntax"
                }

/user/userID
  {userID}
  type: Collection
      get:
        description: Returns information for a specific user based off userID
        responses:
          200:
            body:
              application/json
              {
                userID: "1"

              }

          404:
            body:
              application/json
                example:
                  {
                    message: "Cannot GET user"
                  }

      delete:
        description: Deletes a specific user, based off thier credentials. Will be removed from users table
          responses:
            200:
              body:
                application/json
                  example:
                  {
                    message: "User[userID] has been successfully removed"
                  }

            403:
              body:
                application/json
                  example:
                    {
                      message: "Cannot delete user, user does not have proper authorization."
                    }

            404:
              body:
                application/json
                  example:
                    {
                      message: "The user cannot be found"
                    }

/users/userID/lists
  type: Collection
      get:
          description: Returns all lists for the specific userID

          responses:
            200:
              body:
                application/json
                  example:
                    {
                      id: "01",
                      listName: "Groceries",
                      itemName: "Eggs" etc..
                    }
            404:
              body:
                application/json
                  example:
                    {
                      message: "Cannot retrieve a list as resource doesnt exists"
                    }

      post:
        description: Creates a new list for that users.
           queryParameters:
                    listName: Takes int the name of a certain list
                    required: true
                    type: string
         body:
           application/json

         responses:
           200/201:
              body:
                application/json
            400:
              body:
                application/json
                  example:
                    {
                      listName: "listName",
                      message: "Cannot create the list"
                    }

/users/userID/lists/listID
  {listID}
  type: Collection
      get:
        description: Returns a specific list with all its items
          responses:
            200:
              body:
                application/json
                  example:
                    {
                      userID: "userID",
                      listName: "The name of list",
                      itemID: "ID for a certain item",
                      itemName: "The name of the actual item"
                    }

            404:
              body:
                application/json
                  example:
                    {
                      message: "Cannot retrieve the item"
                    }

      post:
        description: Creates a new list item/task in a specific list for that users.
            queryParameters:
              listItem:
                required: true
                type: string
         body:
           application/json

         responses:
           200/201:
             body:
               application/json
                {
                  message: "You have successfully added an item"
                }

          403:
            body:
              application/json
                example:
                  {
                    message: "User does not have authorization to create resource"
                  }
          400:
            body:
              application/json
                example:
                  {
                    message: "Something went wrong when trying to perform POST"
                  }
      delete:
        description: Deletes a certain list.
          responses:
            200:
              body:
                application/json
                  example:
                  {
                    message: "The list has been successfully removed"
                  }

            403:
             body:
               application/json
                 example:
                   {
                     message: "The user does not have authorization to delete"
                   }

      put:
        description: Will update a users list i.e listname
         queryParameters:
          listName:
            required: true
            type: string

          responses:
            200/201:
              body:
                application/json
                  example:
                  {
                    message: "The list has been successfully updated"
                  }
            403:
              body:
                application/json
                  example:
                    {
                      message: "The user does not have the authorization to delete this resource "
                    }
                        

                           
/users/userID/lists/listID/itemID
{itemID}

  get:
    description: Returns a specific item in the list
    responses:
      200:
        body:
          application/json
            {
              itemID: "Of type int i.e 4",
              itemName: "a certain item i.e eggs"
            }
      404:
        body:
          application/json
            example:
              {
                message: "Item cannot be found or does not exist"
              }

   delete:
     description: Deletes a certain list item/task.
      responses:
        200:
          body:
            application/json
              example:
              {
                message: "The item has been successfully removed"
              }
        403:
          body:
            application/json
              example:
                {
                  message: "The user does not have authorization to delete"
                }

    put:
      description: Will update a users task i.e itemName changed eggs to large eggs
        responses:
          200:
            body:
              application/json
                example:
                {
                  message: "The item has been successfully updated"
                }
          403:
            body:
              application/json
                example:
                  {
                    message: "The user does not have authorization to modify this item"
                  }